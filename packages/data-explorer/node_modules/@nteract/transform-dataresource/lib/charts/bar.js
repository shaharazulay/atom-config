"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.semioticBarChart = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var React = _interopRequireWildcard(require("react"));

var _tooltipContent = _interopRequireDefault(require("../tooltip-content"));

var _shared = require("./shared");

var _HTMLLegend = _interopRequireDefault(require("../HTMLLegend"));

var _utilities = require("../utilities");

var semioticBarChart = function semioticBarChart(data, schema, options) {
  var selectedMetrics = options.selectedMetrics,
      selectedDimensions = options.selectedDimensions,
      chart = options.chart,
      colors = options.colors,
      setColor = options.setColor;
  var dim1 = chart.dim1,
      dim2 = chart.dim2,
      metric1 = chart.metric1,
      metric3 = chart.metric3;
  var oAccessor = selectedDimensions.length === 0 ? dim1 : function (d) {
    return selectedDimensions.map(function (p) {
      return d[p];
    }).join(",");
  };
  var rAccessor = metric1;
  var additionalSettings = {};
  var colorHash = {
    Other: "grey"
  };
  var sortedData = (0, _shared.sortByOrdinalRange)(oAccessor, metric3 !== "none" && metric3 || rAccessor, dim1, data);

  if (metric3 && metric3 !== "none") {
    additionalSettings.dynamicColumnWidth = metric3;
  }

  if (dim1 && dim1 !== "none") {
    var uniqueValues = sortedData.reduce(function (p, c) {
      return !p.find(function (d) {
        return d === c[dim1].toString();
      }) && (0, _toConsumableArray2.default)(p).concat([c[dim1].toString()]) || p;
    }, []);
    uniqueValues.forEach(function (d, i) {
      colorHash[d] = i > 18 ? "grey" : colors[i % colors.length];
    });
    additionalSettings.afterElements = React.createElement(_HTMLLegend.default, {
      valueHash: {},
      values: uniqueValues,
      colorHash: colorHash,
      setColor: setColor,
      colors: colors
    });

    if (selectedDimensions.length > 0 && selectedDimensions.join(",") !== dim1) {
      additionalSettings.pieceHoverAnnotation = true;

      additionalSettings.tooltipContent = function (d) {
        return React.createElement(_tooltipContent.default, null, dim1 && dim1 !== "none" && React.createElement("p", null, d[dim1]), React.createElement("p", null, typeof oAccessor === "function" ? oAccessor(d) : d[oAccessor]), React.createElement("p", null, rAccessor, ": ", d[rAccessor]), metric3 && metric3 !== "none" && React.createElement("p", null, metric3, ": ", d[metric3]));
      };
    }
  } //replace with incoming cardinality when df.describe metadata is implemented


  var cardinality = selectedDimensions.length > 0 && !(selectedDimensions.length === 1 && dim1 === selectedDimensions[0]) && sortedData.map(function (d) {
    return d[dim1];
  }).reduce(function (p, c) {
    return p.indexOf(c) === -1 ? (0, _toConsumableArray2.default)(p).concat([c]) : p;
  }, []).length || 0;
  var barSettings = (0, _objectSpread2.default)({
    type: cardinality > 4 ? "clusterbar" : "bar",
    data: sortedData,
    oAccessor: oAccessor,
    rAccessor: rAccessor,
    style: function style(d) {
      return {
        fill: colorHash[d[dim1]] || colors[0],
        stroke: colorHash[d[dim1]] || colors[0]
      };
    },
    oPadding: 5,
    oLabel: function oLabel(d) {
      return React.createElement("text", {
        transform: "rotate(90)"
      }, d);
    },
    hoverAnnotation: true,
    margin: {
      top: 10,
      right: 10,
      bottom: 100,
      left: 70
    },
    axis: {
      orient: "left",
      label: rAccessor,
      tickFormat: _utilities.numeralFormatting
    },
    tooltipContent: function tooltipContent(d) {
      return React.createElement(_tooltipContent.default, null, React.createElement("p", null, typeof oAccessor === "function" ? oAccessor(d.pieces[0]) : d.pieces[0][oAccessor]), React.createElement("p", null, rAccessor, ":", " ", d.pieces.map(function (p) {
        return p[rAccessor];
      }).reduce(function (p, c) {
        return p + c;
      }, 0)), metric3 && metric3 !== "none" && React.createElement("p", null, metric3, ":", " ", d.pieces.map(function (p) {
        return p[metric3];
      }).reduce(function (p, c) {
        return p + c;
      }, 0)));
    },
    baseMarkProps: {
      forceUpdate: true
    }
  }, additionalSettings);
  return barSettings;
};

exports.semioticBarChart = semioticBarChart;