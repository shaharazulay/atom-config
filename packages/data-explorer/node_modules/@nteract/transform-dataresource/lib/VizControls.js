"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var React = _interopRequireWildcard(require("react"));

var _chartDocs = require("./docs/chart-docs");

var _vizControls = _interopRequireDefault(require("./css/viz-controls"));

var _buttonGroup = _interopRequireDefault(require("./css/button-group"));

var metricDimSelector = function metricDimSelector(values, selectionFunction, title, required, selectedValue) {
  var contextTooltip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "Help me help you help yourself";
  var metricsList = required ? values : ["none"].concat((0, _toConsumableArray2.default)(values));
  var displayMetrics;
  if (metricsList.length > 1) displayMetrics = React.createElement("select", {
    value: selectedValue,
    onChange: function onChange(e) {
      return selectionFunction(e.target.value);
    }
  }, metricsList.map(function (d) {
    return React.createElement("option", {
      key: "selector-option-".concat(d),
      value: d,
      label: d
    }, d);
  }));else displayMetrics = React.createElement("p", {
    style: {
      margin: 0
    }
  }, metricsList[0]);
  return React.createElement("div", {
    title: contextTooltip,
    className: "jsx-".concat(_vizControls.default.__hash) + " " + "control-wrapper"
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash)
  }, title), displayMetrics, React.createElement(_style.default, {
    styleId: _vizControls.default.__hash,
    css: _vizControls.default
  }));
};

var availableLineTypes = [{
  type: "line",
  label: "Line Chart"
}, {
  type: "stackedarea",
  label: "Stacked Area Chart"
}, {
  type: "stackedpercent",
  label: "Stacked Area Chart (Percent)"
}, {
  type: "bumparea",
  label: "Ranked Area Chart"
}];
var availableAreaTypes = [{
  type: "hexbin",
  label: "Hexbin"
}, {
  type: "heatmap",
  label: "Heatmap"
}, {
  type: "contour",
  label: "Contour Plot"
}];

var _default = function _default(_ref) {
  var view = _ref.view,
      chart = _ref.chart,
      metrics = _ref.metrics,
      dimensions = _ref.dimensions,
      updateChart = _ref.updateChart,
      selectedDimensions = _ref.selectedDimensions,
      selectedMetrics = _ref.selectedMetrics,
      hierarchyType = _ref.hierarchyType,
      summaryType = _ref.summaryType,
      networkType = _ref.networkType,
      setLineType = _ref.setLineType,
      updateMetrics = _ref.updateMetrics,
      updateDimensions = _ref.updateDimensions,
      lineType = _ref.lineType,
      areaType = _ref.areaType,
      setAreaType = _ref.setAreaType;
  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "wrapper"
  }, (view === "summary" || view === "scatter" || view === "hexbin" || view === "bar" || view === "network" || view === "hierarchy") && metricDimSelector(metrics.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        metric1: d
      })
    });
  }, view === "scatter" || view === "hexbin" ? "X" : "Metric", true, chart.metric1, _chartDocs.controlHelpText.metric1[view] || _chartDocs.controlHelpText.metric1.default), (view === "scatter" || view === "hexbin") && metricDimSelector(metrics.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        metric2: d
      })
    });
  }, "Y", true, chart.metric2, _chartDocs.controlHelpText.metric2[view] || _chartDocs.controlHelpText.metric2.default), (view === "scatter" || view === "bar") && metricDimSelector(metrics.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        metric3: d
      })
    });
  }, view === "bar" ? "Width" : "Size", false, chart.metric3, _chartDocs.controlHelpText.metric3[view] || _chartDocs.controlHelpText.metric3.default), (view === "summary" || view === "scatter" || view === "hexbin" && areaType === "contour" || view === "bar" || view === "parallel") && metricDimSelector(dimensions.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        dim1: d
      })
    });
  }, view === "summary" ? "Category" : "Color", true, chart.dim1, _chartDocs.controlHelpText.dim1[view] || _chartDocs.controlHelpText.dim1.default), view === "scatter" && metricDimSelector(dimensions.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        dim2: d
      })
    });
  }, "Labels", false, chart.dim2, _chartDocs.controlHelpText.dim2[view] || _chartDocs.controlHelpText.dim2.default), areaType === "contour" && metricDimSelector(["by color"], function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        dim3: d
      })
    });
  }, "Multiclass", false, chart.dim3, _chartDocs.controlHelpText.dim3[view] || _chartDocs.controlHelpText.dim3.default), view === "network" && metricDimSelector(dimensions.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        dim1: d
      })
    });
  }, "SOURCE", true, chart.dim1, _chartDocs.controlHelpText.dim1[view] || _chartDocs.controlHelpText.dim1.default), view === "network" && metricDimSelector(dimensions.map(function (d) {
    return d.name;
  }), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        dim2: d
      })
    });
  }, "TARGET", true, chart.dim2, _chartDocs.controlHelpText.dim2[view] || _chartDocs.controlHelpText.dim2.default), view === "network" && metricDimSelector(["force", "sankey"], function (d) {
    return updateChart({
      networkType: d
    });
  }, "Type", true, networkType, _chartDocs.controlHelpText.networkType), view === "hierarchy" && metricDimSelector(["dendrogram", "treemap", "partition"], function (d) {
    return updateChart({
      hierarchyType: d
    });
  }, "Type", true, hierarchyType, _chartDocs.controlHelpText.hierarchyType), view === "summary" && metricDimSelector(["violin", "boxplot", "joy", "heatmap", "histogram"], function (d) {
    return updateChart({
      summaryType: d
    });
  }, "Type", true, summaryType, _chartDocs.controlHelpText.summaryType), view === "line" && metricDimSelector(["array-order"].concat((0, _toConsumableArray2.default)(metrics.map(function (d) {
    return d.name;
  }))), function (d) {
    return updateChart({
      chart: (0, _objectSpread2.default)({}, chart, {
        timeseriesSort: d
      })
    });
  }, "Sort by", true, chart.timeseriesSort, _chartDocs.controlHelpText.timeseriesSort), view === "line" && React.createElement("div", {
    title: _chartDocs.controlHelpText.lineType,
    style: {
      display: "inline-block"
    },
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, "Chart Type"), availableLineTypes.map(function (d) {
    return React.createElement("button", {
      key: d.lineType,
      onClick: function onClick() {
        return setLineType(d.type);
      },
      className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(lineType === d.type && "selected")
    }, d.label);
  })), view === "hexbin" && React.createElement("div", {
    title: _chartDocs.controlHelpText.areaType,
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "control-wrapper"
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, "Chart Type"), React.createElement("div", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "button-group"
  }, availableAreaTypes.map(function (d) {
    return React.createElement("button", {
      onClick: function onClick() {
        return setAreaType(d.type);
      },
      className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(areaType === d.type && "selected")
    }, d.label);
  }))), view === "hierarchy" && React.createElement("div", {
    title: _chartDocs.controlHelpText.nestingDimensions,
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "control-wrapper"
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, "Nesting"), selectedDimensions.length === 0 ? "Select categories to nest" : "root, ".concat(selectedDimensions.join(", "))), (view === "bar" || view === "hierarchy") && React.createElement("div", {
    title: _chartDocs.controlHelpText.barDimensions,
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "control-wrapper"
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, "Categories"), dimensions.map(function (d) {
    return React.createElement("button", {
      key: "dimensions-select-".concat(d.name),
      onClick: function onClick() {
        return updateDimensions(d.name);
      },
      className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(selectedDimensions.indexOf(d.name) !== -1 && "selected")
    }, d.name);
  })), view === "line" && React.createElement("div", {
    title: _chartDocs.controlHelpText.lineDimensions,
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "control-wrapper"
  }, React.createElement("h2", {
    className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash)
  }, "Metrics"), metrics.map(function (d) {
    return React.createElement("button", {
      key: "metrics-select-".concat(d.name),
      onClick: function onClick() {
        return updateMetrics(d.name);
      },
      className: "jsx-".concat(_vizControls.default.__hash, " jsx-").concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(selectedMetrics.indexOf(d.name) !== -1 && "selected")
    }, d.name);
  }))), React.createElement(_style.default, {
    styleId: _vizControls.default.__hash,
    css: _vizControls.default
  }), React.createElement(_style.default, {
    styleId: _buttonGroup.default.__hash,
    css: _buttonGroup.default
  }));
};

exports.default = _default;