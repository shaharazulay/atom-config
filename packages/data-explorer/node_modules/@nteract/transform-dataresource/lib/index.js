"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IconButton = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _reactHotLoader = require("react-hot-loader");

var React = _interopRequireWildcard(require("react"));

var _octicons = require("@nteract/octicons");

var _settings = require("./settings");

var _settings2 = require("./charts/settings");

var _grid = require("./charts/grid");

var _VizControls = _interopRequireDefault(require("./VizControls"));

var _semiotic = _interopRequireDefault(require("./css/semiotic"));

var _icons = require("./icons");

var _chartDocs = require("./docs/chart-docs");

var generateChartKey = function generateChartKey(_ref) {
  var view = _ref.view,
      lineType = _ref.lineType,
      selectedDimensions = _ref.selectedDimensions,
      selectedMetrics = _ref.selectedMetrics,
      pieceType = _ref.pieceType,
      summaryType = _ref.summaryType,
      networkType = _ref.networkType,
      hierarchyType = _ref.hierarchyType,
      chart = _ref.chart;
  return "".concat(view, "-").concat(lineType, "-").concat(selectedDimensions.join(","), "-").concat(selectedMetrics.join(","), "-").concat(pieceType, "-").concat(summaryType, "-").concat(networkType, "-").concat(hierarchyType, "-").concat((0, _stringify.default)(chart));
};
/*
  contour is an option for scatterplot
  pie is a transform on bar
*/


var MetadataWarning = function MetadataWarning(_ref2) {
  var metadata = _ref2.metadata;
  var warning = metadata && metadata.sampled ? React.createElement("span", null, React.createElement("b", null, "NOTE:"), " This data is sampled") : null;
  return React.createElement("div", {
    style: {
      fontFamily: "Source Sans Pro, Helvetica Neue, Helvetica, Arial, sans-serif"
    }
  }, warning ? React.createElement("div", {
    style: {
      backgroundColor: "#cce",
      padding: "10px",
      paddingLeft: "20px"
    }
  }, warning) : null);
}; ///////////////////////////////


var DataResourceTransform =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(DataResourceTransform, _React$Component);

  function DataResourceTransform(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DataResourceTransform);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DataResourceTransform).call(this, props)); //DEFAULT FROM PROPS

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateChart", function (updatedState) {
      var _this$state$updatedSt = (0, _objectSpread3.default)({}, _this.state, updatedState),
          view = _this$state$updatedSt.view,
          dimensions = _this$state$updatedSt.dimensions,
          metrics = _this$state$updatedSt.metrics,
          chart = _this$state$updatedSt.chart,
          lineType = _this$state$updatedSt.lineType,
          areaType = _this$state$updatedSt.areaType,
          selectedDimensions = _this$state$updatedSt.selectedDimensions,
          selectedMetrics = _this$state$updatedSt.selectedMetrics,
          pieceType = _this$state$updatedSt.pieceType,
          summaryType = _this$state$updatedSt.summaryType,
          networkType = _this$state$updatedSt.networkType,
          hierarchyType = _this$state$updatedSt.hierarchyType,
          colors = _this$state$updatedSt.colors,
          primaryKey = _this$state$updatedSt.primaryKey,
          stateData = _this$state$updatedSt.data;

      var _this$props = _this.props,
          data = _this$props.data,
          _this$props$height = _this$props.height,
          height = _this$props$height === void 0 ? 500 : _this$props$height;
      var _semioticSettings$vie = _settings2.semioticSettings[view],
          Frame = _semioticSettings$vie.Frame,
          chartGenerator = _semioticSettings$vie.chartGenerator;
      var chartKey = generateChartKey({
        view: view,
        lineType: lineType,
        areaType: areaType,
        selectedDimensions: selectedDimensions,
        selectedMetrics: selectedMetrics,
        pieceType: pieceType,
        summaryType: summaryType,
        networkType: networkType,
        hierarchyType: hierarchyType,
        chart: chart
      });
      var frameSettings = chartGenerator(stateData, data.schema, {
        metrics: metrics,
        dimensions: dimensions,
        chart: chart,
        colors: colors,
        height: height,
        lineType: lineType,
        areaType: areaType,
        selectedDimensions: selectedDimensions,
        selectedMetrics: selectedMetrics,
        pieceType: pieceType,
        summaryType: summaryType,
        networkType: networkType,
        hierarchyType: hierarchyType,
        primaryKey: primaryKey,
        setColor: _this.setColor
      });
      var display = React.createElement("div", {
        style: {
          marginLeft: "50px",
          width: "calc(100vw - 200px)"
        },
        className: "jsx-".concat(_semiotic.default.__hash)
      }, React.createElement(Frame, (0, _extends2.default)({
        responsiveWidth: true,
        size: [500, height - 200]
      }, frameSettings, {
        className: "jsx-".concat(_semiotic.default.__hash) + " " + (frameSettings.className != null && frameSettings.className || "")
      })), React.createElement(_VizControls.default, {
        view: view,
        chart: chart,
        metrics: metrics,
        dimensions: dimensions,
        selectedDimensions: selectedDimensions,
        selectedMetrics: selectedMetrics,
        hierarchyType: hierarchyType,
        summaryType: summaryType,
        networkType: networkType,
        updateChart: _this.updateChart,
        updateDimensions: _this.updateDimensions,
        setLineType: _this.setLineType,
        updateMetrics: _this.updateMetrics,
        lineType: lineType,
        setAreaType: _this.setAreaType,
        areaType: areaType
      }), React.createElement(_style.default, {
        styleId: _semiotic.default.__hash,
        css: _semiotic.default
      }));

      _this.setState((0, _objectSpread3.default)({
        displayChart: (0, _objectSpread3.default)({}, _this.state.displayChart, (0, _defineProperty2.default)({}, chartKey, display))
      }, updatedState));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setView", function (view) {
      _this.updateChart({
        view: view
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setGrid", function () {
      _this.setState({
        view: "grid"
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setColor", function (newColorArray) {
      _this.updateChart({
        colors: newColorArray
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setLineType", function (e) {
      _this.updateChart({
        lineType: e
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setAreaType", function (e) {
      _this.updateChart({
        areaType: e
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateDimensions", function (e) {
      var oldDims = _this.state.selectedDimensions;
      var newDimensions = oldDims.indexOf(e) === -1 ? (0, _toConsumableArray2.default)(oldDims).concat([e]) : oldDims.filter(function (d) {
        return d !== e;
      });

      _this.updateChart({
        selectedDimensions: newDimensions
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateMetrics", function (e) {
      var oldDims = _this.state.selectedMetrics;
      var newMetrics = oldDims.indexOf(e) === -1 ? (0, _toConsumableArray2.default)(oldDims).concat([e]) : oldDims.filter(function (d) {
        return d !== e;
      });

      _this.updateChart({
        selectedMetrics: newMetrics
      });
    });

    var _props$data$schema = props.data.schema,
        _props$data$schema$fi = _props$data$schema.fields,
        fields = _props$data$schema$fi === void 0 ? [] : _props$data$schema$fi,
        _props$data$schema$pr = _props$data$schema.primaryKey,
        _primaryKey = _props$data$schema$pr === void 0 ? [] : _props$data$schema$pr;

    var _dimensions = fields.filter(function (d) {
      return d.type === "string" || d.type === "boolean" || d.type === "datetime";
    }); //Should datetime data types be transformed into js dates before getting to this resource?


    var _data = props.data.data.map(function (d) {
      var mappedD = (0, _objectSpread3.default)({}, d);
      fields.forEach(function (p) {
        if (p.type === "datetime") {
          mappedD[p.name] = new Date(mappedD[p.name]);
        }
      });
      return mappedD;
    });

    var _metrics = fields.filter(function (d) {
      return d.type === "integer" || d.type === "number" || d.type === "datetime";
    }).filter(function (d) {
      return !_primaryKey.find(function (p) {
        return p === d.name;
      });
    });

    _this.state = {
      view: "grid",
      lineType: "line",
      areaType: "hexbin",
      selectedDimensions: [],
      selectedMetrics: [],
      pieceType: "bar",
      summaryType: "violin",
      networkType: "force",
      hierarchyType: "dendrogram",
      colorValue: "none",
      labelValue: "none",
      sizeValue: "none",
      sourceDimension: "none",
      targetDimension: "none",
      xValue: "none",
      yValue: "none",
      dimensions: _dimensions,
      metrics: _metrics,
      colors: _settings.colors,
      ui: {},
      chart: {
        metric1: _metrics[0] && _metrics[0].name || "none",
        metric2: _metrics[1] && _metrics[1].name || "none",
        metric3: "none",
        dim1: _dimensions[0] && _dimensions[0].name || "none",
        dim2: _dimensions[1] && _dimensions[1].name || "none",
        dim3: "none",
        timeseriesSort: "array-order"
      },
      displayChart: {},
      primaryKey: _primaryKey,
      data: _data
    };
    return _this;
  } //SET STATE WHENEVER CHANGES
  //HELD IN STATE LIKE SO
  //UI CHOICES
  //CHART CHOICES
  //DERIVED DATA


  (0, _createClass2.default)(DataResourceTransform, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          view = _this$state.view,
          dimensions = _this$state.dimensions,
          chart = _this$state.chart,
          lineType = _this$state.lineType,
          selectedDimensions = _this$state.selectedDimensions,
          selectedMetrics = _this$state.selectedMetrics,
          pieceType = _this$state.pieceType,
          summaryType = _this$state.summaryType,
          networkType = _this$state.networkType,
          hierarchyType = _this$state.hierarchyType;
      var display = null;

      if (view === "grid") {
        display = React.createElement(_grid.DataResourceTransformGrid, this.props);
      } else if (["line", "scatter", "bar", "network", "summary", "hierarchy", "hexbin", "parallel"].includes(view)) {
        var chartKey = generateChartKey({
          view: view,
          lineType: lineType,
          selectedDimensions: selectedDimensions,
          selectedMetrics: selectedMetrics,
          pieceType: pieceType,
          summaryType: summaryType,
          networkType: networkType,
          hierarchyType: hierarchyType,
          chart: chart
        });
        display = this.state.displayChart[chartKey];
      }

      return React.createElement("div", null, React.createElement(MetadataWarning, {
        metadata: this.props.metadata
      }), React.createElement("div", {
        style: {
          display: "flex",
          flexFlow: "row nowrap",
          width: "100%",
          height: this.props.height
        }
      }, React.createElement("div", {
        style: {
          flex: "1"
        }
      }, display), React.createElement("div", {
        style: {
          display: "flex",
          flexFlow: "column nowrap",
          zIndex: 1,
          padding: "5px",
          background: "white"
        }
      }, React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.grid,
        onClick: this.setGrid,
        message: "Data Table",
        selected: false
      }, React.createElement(_octicons.DatabaseOcticon, null)), dimensions.length > 0 && React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.bar,
        onClick: function onClick() {
          return _this2.setView("bar");
        },
        selected: view === "bar",
        message: "Bar Graph"
      }, React.createElement(_icons.BarChartIcon, null)), React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.summary,
        onClick: function onClick() {
          return _this2.setView("summary");
        },
        selected: view === "summary",
        message: "Summary"
      }, React.createElement(_icons.BoxplotIcon, null)), React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.scatter,
        onClick: function onClick() {
          return _this2.setView("scatter");
        },
        selected: view === "scatter",
        message: "Scatter Plot"
      }, React.createElement(_icons.ScatterplotIcon, null)), React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.hexbin,
        onClick: function onClick() {
          return _this2.setView("hexbin");
        },
        selected: view === "hexbin",
        message: "Area Plot"
      }, React.createElement(_icons.HexbinIcon, null)), dimensions.length > 1 && React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.network,
        onClick: function onClick() {
          return _this2.setView("network");
        },
        selected: view === "network",
        message: "Network"
      }, React.createElement(_icons.NetworkIcon, null)), dimensions.length > 0 && React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.hierarchy,
        onClick: function onClick() {
          return _this2.setView("hierarchy");
        },
        selected: view === "hierarchy",
        message: "Hierarchy"
      }, React.createElement(_icons.TreeIcon, null)), dimensions.length > 0 && React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.parallel,
        onClick: function onClick() {
          return _this2.setView("parallel");
        },
        selected: view === "parallel",
        message: "Parallel Coordinates"
      }, React.createElement(_icons.ParallelCoordinatesIcon, null)), React.createElement(IconButton, {
        title: _chartDocs.chartHelpText.line,
        onClick: function onClick() {
          return _this2.setView("line");
        },
        selected: view === "line",
        message: "Line Graph"
      }, React.createElement(_icons.LineChartIcon, null)))));
    }
  }]);
  return DataResourceTransform;
}(React.Component); /////////////////////////////


(0, _defineProperty2.default)(DataResourceTransform, "MIMETYPE", "application/vnd.dataresource+json");
(0, _defineProperty2.default)(DataResourceTransform, "defaultProps", {
  metadata: {},
  height: 500
});

var IconButton =
/*#__PURE__*/
function (_React$Component2) {
  (0, _inherits2.default)(IconButton, _React$Component2);

  function IconButton() {
    (0, _classCallCheck2.default)(this, IconButton);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IconButton).apply(this, arguments));
  }

  (0, _createClass2.default)(IconButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          message = _this$props2.message,
          onClick = _this$props2.onClick,
          children = _this$props2.children,
          selected = _this$props2.selected,
          _this$props2$title = _this$props2.title,
          title = _this$props2$title === void 0 ? message : _this$props2$title;
      var style = {
        width: "32px",
        height: "32px",
        cursor: "pointer"
      };

      if (selected) {
        style.border = "1px outset #666";
        style.backgroundColor = "#aaa";
      }

      return React.createElement("button", {
        onClick: onClick,
        key: message,
        title: title,
        style: style
      }, children);
    }
  }]);
  return IconButton;
}(React.Component);

exports.IconButton = IconButton;

var _default = (0, _reactHotLoader.hot)(module)(DataResourceTransform);

exports.default = _default;