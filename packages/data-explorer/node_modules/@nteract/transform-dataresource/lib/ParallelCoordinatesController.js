"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/map"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var React = _interopRequireWildcard(require("react"));

var _d3Scale = require("d3-scale");

var _semiotic = require("semiotic");

var _HTMLLegend = _interopRequireDefault(require("./HTMLLegend"));

var _utilities = require("./utilities");

var _buttonGroup = _interopRequireDefault(require("./css/button-group"));

var _tooltipContent = _interopRequireDefault(require("./tooltip-content"));

var connectorFunction = function connectorFunction(d) {
  return d.Country;
};

function parallelizeData(data, metrics, schemaFields, primaryKey) {
  var minmax = {};
  var screenScales = {};
  metrics.forEach(function (metric) {
    var dataExtent = [Math.min.apply(Math, (0, _toConsumableArray2.default)(data.map(function (d) {
      return d[metric.name];
    }))), Math.max.apply(Math, (0, _toConsumableArray2.default)(data.map(function (d) {
      return d[metric.name];
    })))];
    var minMaxScale = (0, _d3Scale.scaleLinear)().domain(dataExtent).range([0, 1]);
    minmax[metric.name] = minMaxScale;
    var screenScale = (0, _d3Scale.scaleLinear)().domain(dataExtent).range([380, 0]);
    screenScales[metric.name] = screenScale;
  });
  var dataPieces = [];
  data.forEach(function (d) {
    metrics.forEach(function (metric) {
      var dataPiece = {
        metric: metric.name,
        rawvalue: d[metric.name],
        pctvalue: minmax[metric.name](d[metric.name])
      };
      schemaFields.forEach(function (field) {
        if (field.type === "string") dataPiece[field.name] = d[field.name];
      });
      primaryKey.forEach(function (key) {
        dataPiece[key] = d[key];
      });
      dataPieces.push(dataPiece);
    });
  });
  return {
    dataPieces: dataPieces,
    scales: screenScales
  };
}

var ParallelCoordinatesController =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ParallelCoordinatesController, _React$Component);

  function ParallelCoordinatesController(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ParallelCoordinatesController);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ParallelCoordinatesController).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "brushing", function (e, c) {
      var columnExtent = _this.state.columnExtent;
      columnExtent[c] = e;

      _this.setState(columnExtent);
    });
    var _this$props = _this.props,
        options = _this$props.options,
        data = _this$props.data,
        schema = _this$props.schema;
    var primaryKey = options.primaryKey;
    var parallelizeResults = parallelizeData(data, options.metrics, schema.fields, primaryKey);
    _this.state = {
      filterMode: true,
      data: parallelizeResults.dataPieces,
      dataScales: parallelizeResults.scales,
      columnExtent: options.metrics.reduce(function (p, c) {
        p[c.name] = undefined;
        return p;
      }, {})
    };
    return _this;
  }

  (0, _createClass2.default)(ParallelCoordinatesController, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          options = _this$props2.options,
          data = _this$props2.data,
          schema = _this$props2.schema;
      var primaryKey = options.primaryKey,
          metrics = options.metrics,
          chart = options.chart,
          colors = options.colors;
      var dim1 = chart.dim1;
      var _this$state = this.state,
          columnExtent = _this$state.columnExtent,
          filterMode = _this$state.filterMode;
      var hiddenHash = new _map.default();
      (0, _keys.default)(columnExtent).forEach(function (key) {
        if (columnExtent[key]) {
          var extent = columnExtent[key].sort(function (a, b) {
            return a - b;
          });

          _this2.state.data.filter(function (d) {
            return d.metric === key && (d.pctvalue < extent[0] || d.pctvalue > extent[1]);
          }).forEach(function (p) {
            hiddenHash.set(primaryKey.map(function (key) {
              return p[key];
            }).join(","), true);
          });
        }
      });
      var additionalSettings = {};
      var shownData = data.filter(function (d) {
        return !hiddenHash.get(primaryKey.map(function (key) {
          return d[key];
        }).join(","));
      });
      var filteredData = shownData.map(function (d) {
        return primaryKey.map(function (key) {
          return d[key];
        }).join(" - ");
      });
      var colorHash = {
        Other: "grey"
      };

      if (dim1 && dim1 !== "none") {
        var _shownData$reduce = shownData.reduce(function (p, c) {
          var v = c[dim1];
          p.valueHash[v] = p.valueHash[v] && p.valueHash[v] + 1 || 1;
          p.uniqueValues = !p.uniqueValues.find(function (d) {
            return d === v;
          }) && (0, _toConsumableArray2.default)(p.uniqueValues).concat([v]) || p.uniqueValues;
          return p;
        }, {
          uniqueValues: [],
          valueHash: {}
        }),
            uniqueValues = _shownData$reduce.uniqueValues,
            valueHash = _shownData$reduce.valueHash;

        uniqueValues.forEach(function (d, i) {
          colorHash[d] = colors[i % colors.length];
        });
        additionalSettings.afterElements = uniqueValues.length < 10 ? React.createElement(_HTMLLegend.default, {
          values: uniqueValues,
          colorHash: colorHash,
          valueHash: valueHash
        }) : React.createElement("p", {
          style: {
            margin: "20px 0 5px"
          }
        }, filteredData.length, " items");
      }

      if (!filterMode) additionalSettings.annotations = metrics.map(function (d) {
        return {
          label: "",
          metric: d.name,
          type: "enclose-rect",
          color: "green",
          disable: ["connector"],
          coordinates: [{
            metric: d.name,
            pctvalue: columnExtent[d.name][0]
          }, {
            metric: d.name,
            pctvalue: columnExtent[d.name][1]
          }]
        };
      }).filter(function (d) {
        return d.coordinates[0].pctvalue !== 0 || d.coordinates[1].pctvalue !== 1;
      });
      return React.createElement("div", {
        className: "jsx-".concat(_buttonGroup.default.__hash)
      }, React.createElement("div", {
        className: "jsx-".concat(_buttonGroup.default.__hash) + " " + "button-group"
      }, React.createElement("button", {
        onClick: function onClick() {
          return _this2.setState({
            filterMode: true
          });
        },
        className: "jsx-".concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(filterMode ? "selected" : "")
      }, "Filter"), React.createElement("button", {
        onClick: function onClick() {
          return _this2.setState({
            filterMode: false
          });
        },
        className: "jsx-".concat(_buttonGroup.default.__hash) + " " + "button-text ".concat(filterMode ? "" : "selected")
      }, "Explore")), React.createElement(_semiotic.ResponsiveOrdinalFrame, (0, _extends2.default)({
        data: this.state.data,
        oAccessor: "metric",
        rAccessor: "pctvalue",
        type: {
          type: "point",
          r: 3
        },
        connectorType: connectorFunction,
        style: function style(d) {
          return {
            fill: hiddenHash.get(primaryKey.map(function (key) {
              return d[key];
            }).join(",")) ? "lightgray" : colorHash[d[dim1]],
            opacity: hiddenHash.get(primaryKey.map(function (key) {
              return d[key];
            }).join(",")) ? 0.5 : 0.99
          };
        },
        connectorStyle: function connectorStyle(d) {
          return {
            stroke: hiddenHash.get(primaryKey.map(function (key) {
              return d.source[key];
            }).join(",")) ? "gray" : colorHash[d.source[dim1]],
            strokeWidth: hiddenHash.get(primaryKey.map(function (key) {
              return d.source[key];
            }).join(",")) ? 1 : 1.5,
            strokeOpacity: hiddenHash.get(d.source.Country) ? 0.1 : 1
          };
        },
        responsiveWidth: true,
        margin: {
          top: 20,
          left: 20,
          right: 20,
          bottom: 100
        },
        oPadding: 40,
        pixelColumnWidth: 80,
        interaction: filterMode && {
          columnsBrush: true,
          during: this.brushing,
          extent: (0, _keys.default)(this.state.columnExtent)
        },
        pieceHoverAnnotation: !filterMode,
        tooltipContent: function tooltipContent(d) {
          return React.createElement(_tooltipContent.default, null, React.createElement("h3", {
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, primaryKey.map(function (key) {
            return d[key];
          }).join(", ")), d[dim1] && React.createElement("h3", {
            style: {
              color: colorHash[d[dim1]]
            },
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, dim1, ": ", d[dim1]), React.createElement("p", {
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, d.metric, ": ", d.rawvalue));
        },
        canvasPieces: true,
        canvasConnectors: true,
        oLabel: function oLabel(d) {
          return React.createElement("g", {
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, React.createElement("text", {
            transform: "rotate(45)",
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, d), React.createElement("g", {
            transform: "translate(-20,-395)",
            className: "jsx-".concat(_buttonGroup.default.__hash)
          }, React.createElement(_semiotic.Axis, {
            scale: _this2.state.dataScales[d],
            size: [40, 380],
            orient: "left",
            ticks: 5,
            tickFormat: function tickFormat(d) {
              return React.createElement("g", {
                className: "jsx-".concat(_buttonGroup.default.__hash)
              }, React.createElement("text", {
                fill: "white",
                stroke: "white",
                opacity: 0.75,
                strokeWidth: 2,
                textAnchor: "end",
                className: "jsx-".concat(_buttonGroup.default.__hash)
              }, (0, _utilities.numeralFormatting)(d)), React.createElement("text", {
                textAnchor: "end",
                className: "jsx-".concat(_buttonGroup.default.__hash)
              }, (0, _utilities.numeralFormatting)(d)));
            }
          })));
        }
      }, additionalSettings)), React.createElement(_style.default, {
        styleId: _buttonGroup.default.__hash,
        css: _buttonGroup.default
      }));
    }
  }]);
  return ParallelCoordinatesController;
}(React.Component);

(0, _defineProperty2.default)(ParallelCoordinatesController, "defaultProps", {
  metadata: {},
  height: 500
});
var _default = ParallelCoordinatesController;
exports.default = _default;