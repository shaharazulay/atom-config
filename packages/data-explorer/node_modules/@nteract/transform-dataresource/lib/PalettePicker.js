"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _path = require("path");

var _reactColor = require("react-color");

var _palettePicker = _interopRequireDefault(require("./css/palette-picker"));

var PalettePicker =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(PalettePicker, _React$Component);

  function PalettePicker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, PalettePicker);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PalettePicker).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "openClose", function () {
      _this.setState({
        open: !_this.state.open,
        colors: _this.props.colors.join(",\n")
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (color, position) {
      _this.setState({
        selectedColor: color,
        selectedPosition: position
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "pickerChange", function (color) {
      var colors = _this.props.colors;
      colors[_this.state.selectedPosition] = color.hex;

      _this.props.updateColor(colors);

      _this.setState({
        selectedColor: color.hex,
        colors: colors.join(",\n")
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "colorsFromTextarea", function () {
      var parsedTextValue = _this.state.colors.replace(/\"/g, "").replace(/ /g, "").replace(/\[/g, "").replace(/\]/g, "").replace(/\r?\n|\r/g, "").split(",");

      _this.props.updateColor(parsedTextValue);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateTextArea", function (e) {
      _this.setState({
        colors: e.target.value
      });
    });
    _this.state = {
      open: false,
      selectedColor: props.colors[0],
      selectedPosition: 0,
      colors: props.colors.join(",\n")
    };
    return _this;
  }

  (0, _createClass2.default)(PalettePicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      if (!this.state.open) {
        return React.createElement("div", {
          style: {
            display: "inline-block"
          },
          className: "jsx-".concat(_palettePicker.default.__hash)
        }, React.createElement("button", {
          onClick: this.openClose,
          className: "jsx-".concat(_palettePicker.default.__hash)
        }, "Adjust Palette"), React.createElement(_style.default, {
          styleId: _palettePicker.default.__hash,
          css: _palettePicker.default
        }));
      }

      var colors = this.props.colors;
      return React.createElement("div", {
        className: "jsx-".concat(_palettePicker.default.__hash) + " " + "wrapper"
      }, React.createElement("div", {
        role: "button",
        tabIndex: "0",
        onClick: this.openClose,
        onKeyPress: function onKeyPress(e) {
          if (e.keyCode === 13) {
            _this2.openClose();
          }
        },
        className: "jsx-".concat(_palettePicker.default.__hash) + " " + "close"
      }, "\xD7"), React.createElement("div", {
        className: "jsx-".concat(_palettePicker.default.__hash) + " " + "grid-wrapper"
      }, React.createElement("div", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, React.createElement("h3", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, "Select Color"), colors.map(function (d, i) {
        return React.createElement("div", {
          key: "color-".concat(i),
          style: {
            background: d
          },
          role: "button",
          tabIndex: "0",
          onKeyPress: function onKeyPress(e) {
            if (e.keyCode === 13) {
              _this2.handleChange(d, i);
            }
          },
          onClick: function onClick() {
            return _this2.handleChange(d, i);
          },
          className: "jsx-".concat(_palettePicker.default.__hash) + " " + "box"
        });
      })), React.createElement("div", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, React.createElement("h3", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, "Adjust Color"), React.createElement("div", {
        style: {
          width: "225px"
        },
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, React.createElement(_reactColor.ChromePicker, {
        color: this.state.selectedColor,
        onChangeComplete: this.pickerChange
      }))), React.createElement("div", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, React.createElement("h3", {
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, "Paste New Colors"), React.createElement("textarea", {
        value: this.state.colors,
        onChange: this.updateTextArea,
        className: "jsx-".concat(_palettePicker.default.__hash)
      }), React.createElement("button", {
        onClick: this.colorsFromTextarea,
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, "Update Colors"))), React.createElement("div", {
        style: {
          marginTop: "30px"
        },
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, React.createElement("a", {
        href: "http://projects.susielu.com/viz-palette?colors=[".concat(colors.map(function (d) {
          return "\"".concat(d, "\"");
        }).join(","), "]&backgroundColor=\"white\"&fontColor=\"black\""),
        className: "jsx-".concat(_palettePicker.default.__hash)
      }, "Evaluate This Palette with VIZ PALETTE")), React.createElement(_style.default, {
        styleId: _palettePicker.default.__hash,
        css: _palettePicker.default
      }));
    }
  }]);
  return PalettePicker;
}(React.Component);

(0, _defineProperty2.default)(PalettePicker, "defaultProps", {
  metadata: {},
  height: 500
});
var _default = PalettePicker;
exports.default = _default;