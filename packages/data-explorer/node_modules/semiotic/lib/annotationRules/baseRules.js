"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hullEnclosure = exports.rectangleEnclosure = exports.circleEnclosure = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _AnnotationCalloutCircle = require("react-annotation/lib/Types/AnnotationCalloutCircle");

var _AnnotationCalloutCircle2 = _interopRequireDefault(_AnnotationCalloutCircle);

var _AnnotationCalloutRect = require("react-annotation/lib/Types/AnnotationCalloutRect");

var _AnnotationCalloutRect2 = _interopRequireDefault(_AnnotationCalloutRect);

var _AnnotationCalloutCustom = require("react-annotation/lib/Types/AnnotationCalloutCustom");

var _AnnotationCalloutCustom2 = _interopRequireDefault(_AnnotationCalloutCustom);

var _Annotation = require("../Annotation");

var _Annotation2 = _interopRequireDefault(_Annotation);

var _d3Polygon = require("d3-polygon");

var _polygonOffset = require("polygon-offset");

var _polygonOffset2 = _interopRequireDefault(_polygonOffset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var circleEnclosure = exports.circleEnclosure = function circleEnclosure(_ref) {
  var d = _ref.d,
      i = _ref.i,
      circle = _ref.circle;
  var _d$radiusPadding = d.radiusPadding,
      radiusPadding = _d$radiusPadding === undefined ? 2 : _d$radiusPadding,
      label = d.label;


  var noteData = _extends({
    dx: 0,
    dy: 0,
    note: { label: label },
    connector: { end: "arrow" }
  }, d, {
    coordinates: undefined,
    x: circle.x,
    y: circle.y,
    type: _AnnotationCalloutCircle2.default,
    subject: {
      radius: circle.r,
      radiusPadding: radiusPadding
    }
  });

  if (noteData.rp) {
    switch (noteData.rp) {
      case "top":
        noteData.dx = 0;
        noteData.dy = -circle.r - noteData.rd;
        break;
      case "bottom":
        noteData.dx = 0;
        noteData.dy = circle.r + noteData.rd;
        break;
      case "left":
        noteData.dx = -circle.r - noteData.rd;
        noteData.dy = 0;
        break;
      default:
        noteData.dx = circle.r + noteData.rd;
        noteData.dy = 0;
    }
  }
  //TODO: Support .ra (setting angle)

  return _react2.default.createElement(_Annotation2.default, { key: d.key || "annotation-" + i, noteData: noteData });
};

var rectangleEnclosure = exports.rectangleEnclosure = function rectangleEnclosure(_ref2) {
  var bboxNodes = _ref2.bboxNodes,
      d = _ref2.d,
      i = _ref2.i;
  var _d$padding = d.padding,
      padding = _d$padding === undefined ? 0 : _d$padding,
      _d$dx = d.dx,
      dx = _d$dx === undefined ? -25 : _d$dx,
      _d$dy = d.dy,
      dy = _d$dy === undefined ? -25 : _d$dy,
      label = d.label;

  var bbox = [[Math.min.apply(Math, _toConsumableArray(bboxNodes.map(function (p) {
    return p.x0;
  }))) - padding, Math.min.apply(Math, _toConsumableArray(bboxNodes.map(function (p) {
    return p.y0;
  }))) - padding], [Math.max.apply(Math, _toConsumableArray(bboxNodes.map(function (p) {
    return p.x1;
  }))) + padding, Math.max.apply(Math, _toConsumableArray(bboxNodes.map(function (p) {
    return p.y1;
  }))) + padding]];

  var noteData = _extends({
    dx: dx,
    dy: dy,
    note: { label: label },
    connector: { end: "arrow" }
  }, d, {
    type: _AnnotationCalloutRect2.default,
    x: bbox[0][0],
    y: bbox[0][1],
    subject: {
      width: bbox[1][0] - bbox[0][0],
      height: bbox[1][1] - bbox[0][1]
    }
  });

  return _react2.default.createElement(_Annotation2.default, { key: d.key || "annotation-" + i, noteData: noteData });
};

var hullEnclosure = exports.hullEnclosure = function hullEnclosure(_ref3) {
  var points = _ref3.points,
      d = _ref3.d,
      i = _ref3.i;
  var _d$color = d.color,
      color = _d$color === undefined ? "black" : _d$color,
      _d$dx2 = d.dx,
      dx = _d$dx2 === undefined ? -25 : _d$dx2,
      _d$dy2 = d.dy,
      dy = _d$dy2 === undefined ? -25 : _d$dy2,
      label = d.label,
      _d$buffer = d.buffer,
      buffer = _d$buffer === undefined ? 10 : _d$buffer,
      _d$strokeWidth = d.strokeWidth,
      strokeWidth = _d$strokeWidth === undefined ? 10 : _d$strokeWidth;


  var hullPoints = (0, _d3Polygon.polygonHull)(points);

  var offset = new _polygonOffset2.default();

  var bufferedHull = offset.data([].concat(_toConsumableArray(hullPoints), [hullPoints[0]])).margin(buffer)[0];

  var hullD = "M" + bufferedHull.map(function (d) {
    return d.join(",");
  }).join("L") + "Z";

  var noteData = _extends({
    dx: dx,
    dy: dy,
    note: { label: label },
    connector: { end: "arrow" }
  }, d, {
    type: _AnnotationCalloutCustom2.default,
    x: bufferedHull[0][0],
    y: bufferedHull[0][1],
    subject: {
      custom: [_react2.default.createElement("path", {
        key: "hull-drawing",
        d: hullD,
        strokeWidth: strokeWidth,
        strokeMiterlimit: "10",
        strokeLinejoin: "miter",
        strokeLinecap: "butt",
        fill: "none",
        stroke: color,
        transform: "translate(" + -bufferedHull[0][0] + "," + -bufferedHull[0][1] + ")"
      })],
      customID: "hull-annotation"
    }
  });

  return _react2.default.createElement(_Annotation2.default, { key: d.key || "annotation-" + i, noteData: noteData });
};