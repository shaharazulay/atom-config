"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _memoizeOne = require("memoize-one");

var _memoizeOne2 = _interopRequireDefault(_memoizeOne);

var _frame_props = require("./constants/frame_props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var framePropHash = {
  NetworkFrame: _frame_props.networkframeproptypes,
  XYFrame: _frame_props.xyframeproptypes,
  OrdinalFrame: _frame_props.ordinalframeproptypes,
  ResponsiveNetworkFrame: _extends({}, _frame_props.networkframeproptypes, _frame_props.responsiveprops),
  ResponsiveXYFrame: _extends({}, _frame_props.xyframeproptypes, _frame_props.responsiveprops),
  ResponsiveOrdinalFrame: _extends({}, _frame_props.ordinalframeproptypes, _frame_props.responsiveprops)
};

function validFrameProps(originalProps, frameType) {
  var newProps = {};
  var frameProps = framePropHash[frameType];
  Object.keys(originalProps).forEach(function (key) {
    if (frameProps[key]) {
      newProps[key] = originalProps[key];
    }
  });
  return newProps;
}

var FacetController = function (_React$Component) {
  _inherits(FacetController, _React$Component);

  function FacetController() {
    _classCallCheck(this, FacetController);

    var _this = _possibleConstructorReturn(this, (FacetController.__proto__ || Object.getPrototypeOf(FacetController)).call(this));

    _this.createExtent = function (extentType, state) {
      return state.extents && state.extents[extentType] ? {
        onChange: _this.extentHandler(extentType),
        extent: state.extents[extentType]
      } : { onChange: _this.extentHandler(extentType) };
    };

    _this.extentHandler = function (extentType) {
      return function (extentValue) {
        _this.setState(function (prevState) {
          var extentMinMaxValues = (prevState.extents[extentType] || []).concat(extentValue);

          return {
            extents: _extends({}, prevState.extents, _defineProperty({}, extentType, [Math.min.apply(Math, _toConsumableArray(extentMinMaxValues)), Math.max.apply(Math, _toConsumableArray(extentMinMaxValues))]))
          };
        });

        return extentValue;
      };
    };

    _this.generateChildAnnotations = function (_ref) {
      var originalAnnotations = _ref.originalAnnotations,
          state = _ref.state;

      var annotations = [].concat(_toConsumableArray(originalAnnotations));

      if (state.facetHover) {
        var facetHoverAnnotation = _extends({}, state.facetHover);
        if (facetHoverAnnotation.type === "column-hover") {
          facetHoverAnnotation.facetColumn = facetHoverAnnotation.column.name;
          facetHoverAnnotation.column = undefined;
        } else {
          facetHoverAnnotation.type = "frame-hover";
          facetHoverAnnotation.y = undefined;
          facetHoverAnnotation.yBottom = undefined;
          facetHoverAnnotation.yMiddle = undefined;
          facetHoverAnnotation.yTop = undefined;
        }

        annotations.push(facetHoverAnnotation);
      }

      return annotations;
    };

    _this.mapChildrenWithAppropriateProps = function (_ref2) {
      var child = _ref2.child,
          originalAnnotations = _ref2.originalAnnotations,
          props = _ref2.props,
          state = _ref2.state;

      var frameType = child.type.displayName;
      var annotations = _this.generateChildAnnotations({
        state: state,
        originalAnnotations: originalAnnotations
      });
      var customProps = _extends({}, props, { annotations: annotations });

      if (!frameType) {
        return _react2.default.cloneElement(child, { facetprops: customProps });
      }

      // pieceHoverAnnotation could be an object, so we need to be explicit in checking for true
      if (props.hoverAnnotation === true || props.pieceHoverAnnotation === true) {
        customProps.customHoverBehavior = function (d) {
          return _this.setState({ facetHover: d });
        };
      }

      if ((frameType === "OrdinalFrame" || frameType === "ResponsiveOrdinalFrame") && props.sharedRExtent === true) {
        customProps.rExtent = _this.createExtent("rExtent", state);
      }

      if ((frameType === "XYFrame" || frameType === "ResponsiveXYFrame") && props.sharedXExtent === true) {
        customProps.xExtent = _this.createExtent("xExtent", state);
      }

      if ((frameType === "XYFrame" || frameType === "ResponsiveXYFrame") && props.sharedYExtent === true) {
        customProps.yExtent = _this.createExtent("yExtent", state);
      }

      return _react2.default.cloneElement(child, validFrameProps(customProps, frameType));
    };

    _this.processFacetController = (0, _memoizeOne2.default)(function (props, state) {
      return _react2.default.Children.map(props.children, function (child) {
        return _this.mapChildrenWithAppropriateProps({
          child: child,
          originalAnnotations: child.props.annotations || [],
          props: props,
          state: state
        });
      });
    });


    _this.state = {
      extents: {},
      facetHover: undefined
    };
    return _this;
  }

  /**
   * Helper for creating extent if we have a  min/max value
   * use that else use the onChange version so we can in return
   * normalize all of the facets to have the same extents
   */


  /**
   * Whenever the extent changes, create the min/max values for each extentType
   * so this could be rExtent for OrdinalFrame or x/yExtent for the XYFrame
   */


  /**
   * Remove and add required annotation props for specific annotation types.
   */


  /**
   * Map hover annotations and extent to child. Initially the extent is an object with
   * an onChange handler however once each of those resolve we then create an
   * extent that matches between all of them. This logic can be found in createExtent and also
   * extentHandler
   */


  /**
   * Memoize the mapping to prevent unecessary updates and not have
   * to use the lifecycle methods.
   */


  _createClass(FacetController, [{
    key: "render",
    value: function render() {
      var Wrapper = this.props.react15Wrapper;

      if (Wrapper) {
        return _react2.default.cloneElement(Wrapper, undefined, this.processFacetController(this.props, this.state));
      }

      return _react2.default.createElement(
        _react2.default.Fragment,
        null,
        this.processFacetController(this.props, this.state)
      );
    }
  }]);

  return FacetController;
}(_react2.default.Component);

exports.default = FacetController;
module.exports = exports['default'];