"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _canvas = require("roughjs-es5/lib/canvas");

var _basicCanvasEffects = require("./canvas/basicCanvasEffects");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualizationLayer = (_temp2 = _class = function (_React$PureComponent) {
  _inherits(VisualizationLayer, _React$PureComponent);

  function VisualizationLayer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, VisualizationLayer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VisualizationLayer.__proto__ || Object.getPrototypeOf(VisualizationLayer)).call.apply(_ref, [this].concat(args))), _this), _this.piecesGroup = {}, _this.canvasDrawing = [], _this.state = {
      canvasDrawing: [],
      dataVersion: "",
      renderedElements: [],
      focusedPieceIndex: null,
      focusedVisualizationGroup: null
    }, _this.updateVisualizationLayer = function (props) {
      var xScale = props.xScale,
          yScale = props.yScale,
          dataVersion = props.dataVersion,
          projectedCoordinateNames = props.projectedCoordinateNames,
          _props$renderPipeline = props.renderPipeline,
          renderPipeline = _props$renderPipeline === undefined ? {} : _props$renderPipeline,
          _props$baseMarkProps = props.baseMarkProps,
          baseMarkProps = _props$baseMarkProps === undefined ? {} : _props$baseMarkProps,
          _props$renderOrder = props.renderOrder,
          renderOrder = _props$renderOrder === undefined ? [] : _props$renderOrder;

      _this.canvasDrawing = [];
      var canvasDrawing = _this.canvasDrawing;

      var renderedElements = [];
      var renderKeys = renderOrder.concat(Object.keys(renderPipeline).filter(function (d) {
        return renderOrder.indexOf(d) === -1;
      }));

      renderKeys.forEach(function (k) {
        var pipe = renderPipeline[k];
        if (pipe && (pipe.data && _typeof(pipe.data) === "object" && !Array.isArray(pipe.data) || pipe.data && pipe.data.length > 0)) {
          var renderedPipe = pipe.behavior(_extends({
            xScale: xScale,
            yScale: yScale,
            canvasDrawing: canvasDrawing,
            projectedCoordinateNames: projectedCoordinateNames,
            baseMarkProps: _extends(baseMarkProps, {
              "aria-label": pipe.ariaLabel && pipe.ariaLabel.items || "dataviz-element",
              "role": "img",
              "tabIndex": -1
            })
          }, pipe));

          if (renderedPipe && renderedPipe.length > 0) {
            renderedElements.push(_react2.default.createElement(
              "g",
              {
                key: k,
                className: k,
                role: "group",
                tabIndex: 0,
                "aria-label": pipe.ariaLabel && renderedPipe.length + " " + pipe.ariaLabel.items + "s in a " + pipe.ariaLabel.chart || k,
                onKeyDown: function onKeyDown(e) {
                  return _this.handleKeyDown(e, k);
                },
                onBlur: function onBlur() {
                  _this.props.voronoiHover(undefined);
                },
                ref: function ref(thisNode) {
                  return thisNode && (_this.piecesGroup[k] = thisNode.childNodes);
                }
              },
              renderedPipe
            ));
          }
        }
      });

      _this.setState({
        renderedElements: renderedElements,
        dataVersion: dataVersion
      });
    }, _this.handleKeyDown = function (e, vizgroup) {
      // If enter, focus on the first element
      var pushed = e.keyCode;
      if (pushed !== 37 && pushed !== 39 && pushed !== 13) return;

      var newPieceIndex = 0;
      var vizGroupSetting = {};

      // If a user pressed enter, highlight the first one
      // Let a user move up and down in stacked bar by getting keys of bars?
      if (_this.state.focusedPieceIndex === null || pushed === 13) {
        vizGroupSetting.focusedVisualizationGroup = vizgroup;
      } else if (pushed === 37) {
        newPieceIndex = _this.state.focusedPieceIndex - 1;
      } else if (pushed === 39) {
        newPieceIndex = _this.state.focusedPieceIndex + 1;
      }

      newPieceIndex = newPieceIndex < 0 ? _this.piecesGroup[vizgroup].length + newPieceIndex : newPieceIndex % _this.piecesGroup[vizgroup].length;

      /*
      const piece = this.props.renderPipeline[vizgroup].accessibleTransform(
        this.props.renderPipeline[vizgroup].data[newPieceIndex]
      )
      */

      var piece = _this.props.renderPipeline[vizgroup].accessibleTransform(_this.props.renderPipeline[vizgroup].data, newPieceIndex, _this.piecesGroup[vizgroup][newPieceIndex]);

      _this.props.voronoiHover(piece);

      _this.setState(_extends({
        focusedPieceIndex: newPieceIndex
      }, vizGroupSetting));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(VisualizationLayer, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      if (this.props.disableContext || !this.props.canvasContext || !this.canvasDrawing) return;

      var size = [this.props.size[0] + this.props.margin.left + this.props.margin.right, this.props.size[1] + this.props.margin.top + this.props.margin.bottom];
      var rc = void 0;
      var context = this.props.canvasContext.getContext("2d");
      context.setTransform(1, 0, 0, 1, this.props.margin.left, this.props.margin.top);
      context.clearRect(-this.props.margin.left, -this.props.margin.top, size[0], size[1]);

      this.canvasDrawing.forEach(function (piece) {
        var style = piece.styleFn ? piece.styleFn(_extends({}, piece.d, piece.d.data), piece.i) || {} : {
          fill: "black",
          stroke: "black",
          opacity: 1,
          fillOpacity: 1,
          strokeOpacity: 1,
          strokeWidth: 1
        };

        var fill = style.fill ? style.fill : "black";
        var stroke = style.stroke ? style.stroke : "black";
        context.setTransform(1, 0, 0, 1, _this2.props.margin.left, _this2.props.margin.top);
        context.translate.apply(context, _toConsumableArray(_this2.props.position));
        context.translate(piece.tx, piece.ty);
        context.fillStyle = fill;
        context.strokeStyle = stroke;
        context.lineWidth = style.strokeWidth ? style.strokeWidth : 0;

        var rcSettings = {};
        var renderObject = piece.markProps.renderMode || piece.renderFn && piece.renderFn(_extends({}, piece.d, piece.d.data), piece.i);
        var actualRenderMode = renderObject && renderObject.renderMode || renderObject;

        if (actualRenderMode) {
          rc = rc || new _canvas.RoughCanvas(_this2.props.canvasContext);
          var rcExtension = (typeof renderObject === "undefined" ? "undefined" : _typeof(renderObject)) === "object" && renderObject || {};
          rcSettings = _extends({
            fill: fill,
            stroke: stroke,
            strokeWidth: context.lineWidth
          }, rcExtension);
        }

        if (piece.markProps.markType === "circle" || piece.markProps.markType === "rect" && piece.markProps.rx > 0) {
          var vizX = 0,
              vizY = 0,
              r = piece.markProps.r;
          if (piece.markProps.width) {
            var halfWidth = piece.markProps.width / 2;
            vizX = piece.markProps.x + halfWidth;
            vizY = piece.markProps.y + halfWidth;
            r = halfWidth;
          }
          if (actualRenderMode === "sketchy") {
            if (context.globalAlpha !== 0) rc.circle(vizX, vizY, r, rcSettings);
          } else {
            context.beginPath();
            context.arc(vizX, vizY, r, 0, 2 * Math.PI);
            context.globalAlpha = style.fillOpacity || style.opacity || 1;
            if (style.fill && style.fill !== "none" && context.globalAlpha !== 0) context.fill();
            context.globalAlpha = style.strokeOpacity || style.opacity || 1;
            if (style.stroke && style.stroke !== "none" && context.globalAlpha !== 0) context.stroke();
          }
        } else if (piece.markProps.markType === "rect") {
          if (actualRenderMode === "sketchy") {
            context.globalAlpha = style.opacity || 1;
            if (context.globalAlpha !== 0) rc.rectangle(piece.markProps.x, piece.markProps.y, piece.markProps.width, piece.markProps.height, rcSettings);
          } else {
            context.globalAlpha = style.fillOpacity || style.opacity || 1;
            if (style.fill && style.fill !== "none" && context.globalAlpha !== 0) context.fillRect(piece.markProps.x, piece.markProps.y, piece.markProps.width, piece.markProps.height);
            context.globalAlpha = style.strokeOpacity || style.opacity || 1;
            if (style.stroke && style.stroke !== "none" && context.globalAlpha !== 0) context.strokeRect(piece.markProps.x, piece.markProps.y, piece.markProps.width, piece.markProps.height);
          }
        } else if (piece.markProps.markType === "path") {
          if (actualRenderMode === "sketchy") {
            context.globalAlpha = style.opacity || 1;
            rc.path(piece.markProps.d, rcSettings);
          } else {
            // $FlowFixMe
            var p = new Path2D(piece.markProps.d);
            context.globalAlpha = style.strokeOpacity || style.opacity || 1;
            if (style.stroke && style.stroke !== "none" && context.globalAlpha !== 0) context.stroke(p);
            context.globalAlpha = style.fillOpacity || style.opacity || 1;
            if (style.fill && style.fill !== "none" && context.globalAlpha !== 0) context.fill(p);
          }
        } else {
          console.error("CURRENTLY UNSUPPORTED MARKTYPE FOR CANVAS RENDERING");
        }
      });
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.globalAlpha = 1;

      if (this.props.canvasPostProcess === "chuckClose") {
        (0, _basicCanvasEffects.chuckCloseCanvasTransform)(this.props.canvasContext, context, size);
      } else if (typeof this.props.canvasPostProcess === "function") {
        this.props.canvasPostProcess(this.props.canvasContext, context, size);
      }

      if (this.state.focusedVisualizationGroup !== null && this.piecesGroup[this.state.focusedVisualizationGroup] && this.state.focusedPieceIndex !== null) {
        var focusElParent = this.piecesGroup[this.state.focusedVisualizationGroup][this.state.focusedPieceIndex];

        var focusEl = focusElParent && [].concat(_toConsumableArray(focusElParent.childNodes)).find(function (child) {
          return child.getAttribute("aria-label");
        }) || focusElParent;

        focusEl && focusEl.focus && focusEl.focus();
      }
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.updateVisualizationLayer(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(np) {
      var lp = this.props;
      var propKeys = Object.keys(np);

      var update = false;
      propKeys.forEach(function (key) {
        if (lp[key] !== np[key]) {
          update = true;
        }
      });

      if (update === true || np.dataVersion && np.dataVersion !== this.state.dataVersion) {
        this.updateVisualizationLayer(np);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var matte = props.matte,
          matteClip = props.matteClip,
          axes = props.axes,
          _props$frameKey = props.frameKey,
          frameKey = _props$frameKey === undefined ? "" : _props$frameKey,
          margin = props.margin;
      var renderedElements = this.state.renderedElements;


      var renderedAxes = axes && _react2.default.createElement(
        "g",
        { key: "visualization-axis-labels", className: "axis axis-labels" },
        axes
      );

      var ariaLabel = "";

      var title = this.props.title && this.props.ariaTitle || this.props.title ? this.props.title.props && typeof this.props.title.props.children === "string" ? "titled " + this.props.title.props.children : "with a complex title" : "with no title";
      ariaLabel = "Visualization " + title + ". Use arrow keys to navigate elements.";

      var renderedDataVisualization = (renderedAxes || renderedElements && renderedElements.length > 0) && _react2.default.createElement(
        "g",
        {
          className: "data-visualization",
          key: "visualization-clip-path",
          "aria-label": ariaLabel,
          role: "group",
          clipPath: matteClip && matte ? "url(#matte-clip" + frameKey + ")" : undefined,
          transform: "translate(" + margin.left + "," + margin.top + ")"
        },
        renderedElements,
        matte,
        renderedAxes
      ) || null;

      return renderedDataVisualization;
    }
  }]);

  return VisualizationLayer;
}(_react2.default.PureComponent), _class.defaultProps = {
  position: [0, 0],
  margin: { left: 0, top: 0, right: 0, bottom: 0 }
}, _temp2);
exports.default = VisualizationLayer;
module.exports = exports['default'];